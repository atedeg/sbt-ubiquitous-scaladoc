name: Build test and deploy
on:
  push:
    tags: ['*']
    branches-ignore:
      - 'autodelivery**'
      - 'bump-**'
      - 'renovate/**'
    paths-ignore:
      - 'CHANGELOG.md'
      - 'LICENCE'
      - 'README.md'
      - 'renovate.json'
  pull_request:
  workflow_dispatch:
  
jobs:
  build:
    name: Build and test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        java: [openjdk@1.17.0]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Scala
        uses: olafurpg/setup-scala@v13
        with:
          java-version: ${{ matrix.java }}

      - name: Cache sbt
        uses: actions/cache@v3
        with:
          path: |
            ~/.sbt
            ~/.ivy2/cache
            ~/.coursier/cache/v1
            ~/.cache/coursier/v1
            ~/AppData/Local/Coursier/Cache/v1
            ~/Library/Caches/Coursier/v1
          key: ${{ runner.os }}-sbt-cache-v2-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('project/build.properties') }}

      - name: Scalafmt
        run: sbt scalafmtCheckAll

      - name: Scalafix
        run: sbt 'scalafixAll --check'

      - name: WartRemover
        run: sbt wartremoverInspect

      - name: Plugin test
        run: sbt scripted

  publish:
    name: Publish
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/alpha' || github.ref == 'refs/heads/beta')
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v3

      - name: Install Scala
        uses: olafurpg/setup-scala@v13
        with:
          java-version: openjdk@1.17.0

      - name: Import GPG key
        run: echo $PGP_SECRET | base64 --decode | gpg --batch --import
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}

      - name: Install npm packages
        run: npm install

      - name: Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
